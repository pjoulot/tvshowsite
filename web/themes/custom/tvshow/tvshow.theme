<?php

use Drupal\Component\Utility\Html;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\file\Entity\File;
/**
 * Implements hook_preprocess_HOOK() for block templates.
 */
function tvshow_preprocess_block(&$variables) {
  $variables['attributes']['class'][] = 'block--' . Html::cleanCssIdentifier($variables['plugin_id']);


  $parts = explode(':', $variables['plugin_id']);
  if (count($parts) === 2) {
    $variables['attributes']['class'][] = 'block-type--' . Html::cleanCssIdentifier($parts[1]);
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function tvshow_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle() . '__' . $variables['elements']['content']['#view_mode']);
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_preprocess_html().
 */
function tvshow_preprocess_html(&$variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  $route_name = \Drupal::routeMatch()->getRouteName();
  $path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  $path_alias = ltrim($path_alias, '/');
  $variables['attributes']['class'][] = 'path-' . Html::cleanCssIdentifier($path_alias);
  $variables['attributes']['class'][] = 'route-' . Html::cleanCssIdentifier($route_name);
}

/**
 * Implements hook_preprocess_html().
 */
function tvshow_preprocess_media(&$variables) {
  if ($variables['media']->bundle() === 'remote_video') {
    $variables['attributes']['class'][] = 'responsive-iframe-container';
  }
}

/**
 * Implements hook_theme_suggestions_taxonomy_term_alter().
 */
function tvshow_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  $term = $variables['elements']['#taxonomy_term'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  // Add view mode theme suggestions.
  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
}

/**
 * Implements hook_preprocess_views_view().
 */
function tvshow_preprocess_views_view(&$variables) {
  $variables['attributes']['class'][] = 'view--' . $variables['id'] . '--' . $variables['display_id'];
}

/**
 * Implements hook_preprocess_views_view().
 */
function tvshow_preprocess_page(&$variables) {
  $variables['header_display'] = theme_get_setting('header_display');
  $variables['header_full_width'] = theme_get_setting('header_full_width');
  $background = theme_get_setting('header_background');
  if (!empty($background)) {
    $file = File::load($background[0]);
    $variables['header_background'] = (!empty($file)) ? file_create_url($file->getFileUri()) : NULL;
  }
  $topImage = theme_get_setting('header_top_image');
  if (!empty($topImage)) {
    $file = File::load($topImage[0]);
    $variables['header_top_image'] = (!empty($file)) ? file_create_url($file->getFileUri()) : NULL;
  }
  $variables['header_background_animated'] = theme_get_setting('header_background_animated');
  $variables['menu_full_width'] = theme_get_setting('menu_full_width');

  $variables['social_media'] = _tvshow_theme_get_social_media();
}

/**
 * Implements hook_preprocess_menu().
 */
function tvshow_preprocess_menu(&$variables, $hook) {
  if (isset($variables['menu_name']) && 'main' == $variables['menu_name']) {
    $variables['attributes']['data-hamburger'] = theme_get_setting('menu_hamburger');
  }
}

/**
 * Implements hook_theme_suggestions_user_alter().
 */
function tvshow_theme_suggestions_user_alter(array &$suggestions, array $variables) {
  $term = $variables['elements']['#user'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  // Add view mode theme suggestions.
  $suggestions[] = 'user__' . $sanitized_view_mode;
}

/**
 * Implements hook_theme_suggestions_alter() for container.
 */
function tvshow_theme_suggestions_container_alter(array &$suggestions, array &$variables) {
  $name = '';
  $type = '';
  $display_id = '';
  if (isset($variables['element']['#name'])) {
    $name = $variables['element']['#name'];
  }

  if (isset($variables['element']['#type'])) {
    $type = $variables['element']['#type'];
  }

  if (isset($variables['element']['#display_id'])) {
    $display_id = $variables['element']['#display_id'];
  }

  array_unshift($suggestions, 'container__' . $type . '__' . $name . '__' . $display_id);
  array_unshift($suggestions, 'container__' . $type . '__' . $name);
}

function _tvshow_theme_get_social_media() {
  $social_media = [
    'facebook',
    'twitter',
    'instagram',
    'steam',
  ];
  $links = [];
  foreach ($social_media as $media) {
    $url_string = theme_get_setting($media . '_url');
    if (!empty($url_string)) {
      $url = Url::fromUri($url_string);
      $link_text =  [
        '#type' => 'html_tag',
        '#tag' => 'i',
        '#value' => '',
        '#attributes' => [
          'class' => [
            'fab',
            'fa-' . $media,
          ],
          'rel' => 'nofollow',
        ],
      ];
      $link = Link::fromTextAndUrl($link_text, $url);
      $links[] = $link->toRenderable();
    }
  }
  return $links;
}
